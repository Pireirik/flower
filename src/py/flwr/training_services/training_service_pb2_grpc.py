# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import training_service_pb2 as training__service__pb2


class FederatedLearningStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetHubPort = channel.unary_unary(
                '/training.FederatedLearning/GetHubPort',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=training__service__pb2.HubPort.FromString,
                )
        self.GetTrainingPort = channel.unary_unary(
                '/training.FederatedLearning/GetTrainingPort',
                request_serializer=training__service__pb2.FlTrainingName.SerializeToString,
                response_deserializer=training__service__pb2.HubPort.FromString,
                )
        self.StartTraining = channel.unary_unary(
                '/training.FederatedLearning/StartTraining',
                request_serializer=training__service__pb2.TrainingParameters.SerializeToString,
                response_deserializer=training__service__pb2.TrainingID.FromString,
                )
        self.BuildTrainingClient = channel.unary_unary(
                '/training.FederatedLearning/BuildTrainingClient',
                request_serializer=training__service__pb2.UserTrainingNames.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CreateTraining = channel.unary_unary(
                '/training.FederatedLearning/CreateTraining',
                request_serializer=training__service__pb2.NewTraining.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SignClient = channel.unary_unary(
                '/training.FederatedLearning/SignClient',
                request_serializer=training__service__pb2.ClientSignature.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UpdateModel = channel.unary_unary(
                '/training.FederatedLearning/UpdateModel',
                request_serializer=training__service__pb2.ModelUpdated.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetAllTrainings = channel.unary_unary(
                '/training.FederatedLearning/GetAllTrainings',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=training__service__pb2.AllTrainings.FromString,
                )
        self.GetRunningInstanceStatus = channel.unary_unary(
                '/training.FederatedLearning/GetRunningInstanceStatus',
                request_serializer=training__service__pb2.FlTrainingName.SerializeToString,
                response_deserializer=training__service__pb2.InstanceState.FromString,
                )
        self.AuthenticateClient = channel.unary_unary(
                '/training.FederatedLearning/AuthenticateClient',
                request_serializer=training__service__pb2.ClientSignature.SerializeToString,
                response_deserializer=training__service__pb2.Signed.FromString,
                )
        self.PullClientImage = channel.unary_stream(
                '/training.FederatedLearning/PullClientImage',
                request_serializer=training__service__pb2.FlTrainingName.SerializeToString,
                response_deserializer=training__service__pb2.ImageTar.FromString,
                )


class FederatedLearningServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetHubPort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrainingPort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTraining(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuildTrainingClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTraining(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllTrainings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRunningInstanceStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthenticateClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullClientImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FederatedLearningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetHubPort': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHubPort,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=training__service__pb2.HubPort.SerializeToString,
            ),
            'GetTrainingPort': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrainingPort,
                    request_deserializer=training__service__pb2.FlTrainingName.FromString,
                    response_serializer=training__service__pb2.HubPort.SerializeToString,
            ),
            'StartTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTraining,
                    request_deserializer=training__service__pb2.TrainingParameters.FromString,
                    response_serializer=training__service__pb2.TrainingID.SerializeToString,
            ),
            'BuildTrainingClient': grpc.unary_unary_rpc_method_handler(
                    servicer.BuildTrainingClient,
                    request_deserializer=training__service__pb2.UserTrainingNames.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreateTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTraining,
                    request_deserializer=training__service__pb2.NewTraining.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SignClient': grpc.unary_unary_rpc_method_handler(
                    servicer.SignClient,
                    request_deserializer=training__service__pb2.ClientSignature.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateModel,
                    request_deserializer=training__service__pb2.ModelUpdated.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetAllTrainings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTrainings,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=training__service__pb2.AllTrainings.SerializeToString,
            ),
            'GetRunningInstanceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRunningInstanceStatus,
                    request_deserializer=training__service__pb2.FlTrainingName.FromString,
                    response_serializer=training__service__pb2.InstanceState.SerializeToString,
            ),
            'AuthenticateClient': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateClient,
                    request_deserializer=training__service__pb2.ClientSignature.FromString,
                    response_serializer=training__service__pb2.Signed.SerializeToString,
            ),
            'PullClientImage': grpc.unary_stream_rpc_method_handler(
                    servicer.PullClientImage,
                    request_deserializer=training__service__pb2.FlTrainingName.FromString,
                    response_serializer=training__service__pb2.ImageTar.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'training.FederatedLearning', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FederatedLearning(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetHubPort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.FederatedLearning/GetHubPort',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            training__service__pb2.HubPort.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTrainingPort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.FederatedLearning/GetTrainingPort',
            training__service__pb2.FlTrainingName.SerializeToString,
            training__service__pb2.HubPort.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.FederatedLearning/StartTraining',
            training__service__pb2.TrainingParameters.SerializeToString,
            training__service__pb2.TrainingID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuildTrainingClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.FederatedLearning/BuildTrainingClient',
            training__service__pb2.UserTrainingNames.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.FederatedLearning/CreateTraining',
            training__service__pb2.NewTraining.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.FederatedLearning/SignClient',
            training__service__pb2.ClientSignature.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.FederatedLearning/UpdateModel',
            training__service__pb2.ModelUpdated.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllTrainings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.FederatedLearning/GetAllTrainings',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            training__service__pb2.AllTrainings.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRunningInstanceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.FederatedLearning/GetRunningInstanceStatus',
            training__service__pb2.FlTrainingName.SerializeToString,
            training__service__pb2.InstanceState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthenticateClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.FederatedLearning/AuthenticateClient',
            training__service__pb2.ClientSignature.SerializeToString,
            training__service__pb2.Signed.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PullClientImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/training.FederatedLearning/PullClientImage',
            training__service__pb2.FlTrainingName.SerializeToString,
            training__service__pb2.ImageTar.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
